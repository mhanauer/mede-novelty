{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Generate a dataframe with the required columns\n",
        "data = {\n",
        "    'member_id': range(1, 101),\n",
        "    'age': np.random.randint(18, 85, size=100),\n",
        "    'gender': np.random.choice(['Male', 'Female'], 100),\n",
        "    'allowed_pmpm': np.random.uniform(100, 5000, size=100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Define a list of real chronic conditions\n",
        "chronic_conditions = [\n",
        "    'Diabetes', 'Hypertension', 'Chronic Kidney Disease', 'Asthma', \n",
        "    'COPD', 'Heart Failure', 'Depression', 'Arthritis'\n",
        "]\n",
        "\n",
        "# Assign real chronic condition names to the dataframe\n",
        "df['chronic_condition'] = np.random.choice(chronic_conditions, 100)\n",
        "\n",
        "# Define criteria for categorizing claimants\n",
        "def categorize_claimant(row):\n",
        "    if row['allowed_pmpm'] > 3000:\n",
        "        return 'Impactable high cost claimant'\n",
        "    elif row['allowed_pmpm'] > 2000:\n",
        "        return 'Unavoidable high cost claimant'\n",
        "    elif row['allowed_pmpm'] > 1000:\n",
        "        return 'Future high cost claimant'\n",
        "    else:\n",
        "        return 'Stable low cost claimant'\n",
        "\n",
        "df['claimant_category'] = df.apply(categorize_claimant, axis=1)\n",
        "\n",
        "# Add a column for predicted high cost level\n",
        "np.random.seed(42)  # For reproducibility\n",
        "df['predicted_high_cost_level'] = np.random.rand(100)\n",
        "\n",
        "# Adjust predicted high cost level based on category\n",
        "def adjust_prediction(row):\n",
        "    if row['claimant_category'] == 'Impactable high cost claimant':\n",
        "        return np.random.uniform(0.3, 0.6)\n",
        "    elif row['claimant_category'] == 'Unavoidable high cost claimant':\n",
        "        return np.random.uniform(0.7, 1.0)\n",
        "    elif row['claimant_category'] == 'Future high cost claimant':\n",
        "        return np.random.uniform(0.7, 1.0)\n",
        "    else:\n",
        "        return np.random.uniform(0.0, 0.3)\n",
        "\n",
        "df['predicted_high_cost_level'] = df.apply(adjust_prediction, axis=1)\n",
        "\n",
        "# Output the head of the dataframe\n",
        "df['predicted_high_cost_level'] = df['predicted_high_cost_level'].round(2)\n",
        "df.head()\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "   member_id  age  gender  allowed_pmpm chronic_condition  \\\n0          1   41    Male   2423.451763      Hypertension   \n1          2   53  Female    579.387387      Hypertension   \n2          3   55  Female   2508.917788              COPD   \n3          4   42  Female   2420.011677              COPD   \n4          5   35  Female    948.689163              COPD   \n\n                claimant_category  predicted_high_cost_level  \n0  Unavoidable high cost claimant                       0.71  \n1        Stable low cost claimant                       0.19  \n2  Unavoidable high cost claimant                       0.79  \n3  Unavoidable high cost claimant                       0.85  \n4        Stable low cost claimant                       0.27  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>member_id</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>allowed_pmpm</th>\n      <th>chronic_condition</th>\n      <th>claimant_category</th>\n      <th>predicted_high_cost_level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>41</td>\n      <td>Male</td>\n      <td>2423.451763</td>\n      <td>Hypertension</td>\n      <td>Unavoidable high cost claimant</td>\n      <td>0.71</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>53</td>\n      <td>Female</td>\n      <td>579.387387</td>\n      <td>Hypertension</td>\n      <td>Stable low cost claimant</td>\n      <td>0.19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>55</td>\n      <td>Female</td>\n      <td>2508.917788</td>\n      <td>COPD</td>\n      <td>Unavoidable high cost claimant</td>\n      <td>0.79</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>42</td>\n      <td>Female</td>\n      <td>2420.011677</td>\n      <td>COPD</td>\n      <td>Unavoidable high cost claimant</td>\n      <td>0.85</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>35</td>\n      <td>Female</td>\n      <td>948.689163</td>\n      <td>COPD</td>\n      <td>Stable low cost claimant</td>\n      <td>0.27</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1722527793640
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}